import 'package:appointment_manager/api_service/api_service.dart';
import 'package:appointment_manager/utils/constants.dart';
import 'package:flutter/material.dart';

import '../models/appointment.dart';
// Import your API service

class AppointmentScreen extends StatefulWidget {
  final int totalAppointment;

  const AppointmentScreen({super.key, required this.totalAppointment});
  @override
  _AppointmentScreenState createState() => _AppointmentScreenState();
}

class _AppointmentScreenState extends State<AppointmentScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _titleController = TextEditingController();
  FocusNode _titleFocusNode = FocusNode();
  final TextEditingController _descriptionController = TextEditingController();
  FocusNode _descriptionFocusNode = FocusNode();
  final TextEditingController _dateController = TextEditingController();
  FocusNode _dateFocusNode = FocusNode();

  final TextEditingController _locationController = TextEditingController();
  FocusNode _locationFocusNode = FocusNode();
  final TextEditingController _companyController = TextEditingController();
  FocusNode _companyFocusNode = FocusNode();
  final TextEditingController _customerNameController = TextEditingController();
  FocusNode _customerNameFocusNode = FocusNode();
  List<Appointment> appointments = []; // A list to hold created appointments
  final APIservices apiService = APIservices(); // Your API service class

  // Method to create a new appointment with dynamic data
  _createAppointment() async {
    if (_formKey.currentState!.validate()) {
      // Collect dynamic data from the controllers
      Appointment newAppointment = Appointment(
        id: widget.totalAppointment +
            1, // ID will be auto-generated by the backend
        title: _titleController.text,
        description: _descriptionController.text,
        date: _dateController.text,
        location: _locationController.text,
        company: _companyController.text,
        customer_name: _customerNameController.text,
      );

      try {
        // Create the appointment using your API service
        Appointment createdAppointment =
            await apiService.createAppointment(newAppointment);

        // If successful, add the new appointment to the list
        setState(() {
          appointments.add(createdAppointment);
        });

        // Clear the form fields after successful creation
        _titleController.clear();
        _descriptionController.clear();
        _dateController.clear();
        _locationController.clear();
        _companyController.clear();
        _customerNameController.clear();
      } catch (e) {
        // Handle any errors during the API call
        print("Error creating appointment: $e");
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Create Appointment'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Container(
              height: MediaQuery.of(context).size.height * 0.8,
              child: Column(
                children: [
                  // Title Input
                  TextFormField(
                    controller: _titleController,
                    focusNode: _titleFocusNode,
                    decoration: InputDecoration(
                        labelText: 'Title',
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Constant.elevatedButtonColor,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Colors.black,
                          ),
                        )),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter a title';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 16,
                  ),
                  // Customer Name Input
                  TextFormField(
                    controller: _customerNameController,
                    focusNode: _customerNameFocusNode,
                    decoration: InputDecoration(
                        labelText: 'Customer Name',
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Constant.elevatedButtonColor,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Colors.black,
                          ),
                        )),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter the customer\'s name';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 16,
                  ),
                  // Description Input
                  TextFormField(
                    controller: _descriptionController,
                    focusNode: _descriptionFocusNode,
                    decoration: InputDecoration(
                        labelText: 'Description',
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Constant.elevatedButtonColor,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Colors.black,
                          ),
                        )),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter a description';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 16,
                  ),
                  // Date Input
                  TextFormField(
                    controller: _dateController,
                    focusNode: _dateFocusNode,
                    decoration: InputDecoration(
                        labelText: 'Date (YYYY-MM-DD)',
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Constant.elevatedButtonColor,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Colors.black,
                          ),
                        )),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter a date';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 16,
                  ),
                  // Location Input
                  TextFormField(
                    controller: _locationController,
                    focusNode: _locationFocusNode,
                    decoration: InputDecoration(
                        labelText: 'Location',
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Constant.elevatedButtonColor,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Colors.black,
                          ),
                        )),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter a location';
                      }
                      return null;
                    },
                  ),
                  SizedBox(
                    height: 16,
                  ),
                  // Company Input
                  TextFormField(
                    controller: _companyController,
                    focusNode: _companyFocusNode,
                    decoration: InputDecoration(
                        labelText: 'Company',
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Constant.elevatedButtonColor,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10.0),
                          borderSide: BorderSide(
                            color: Colors.black,
                          ),
                        )),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter the company name';
                      }
                      return null;
                    },
                  ),

                  SizedBox(height: 20),
                  // Submit Button
                  ElevatedButton(
                    onPressed: _createAppointment,
                    child: Text('Create Appointment'),
                  ),
                  SizedBox(height: 20),
                  // Display created appointments
                  Expanded(
                    child: ListView.builder(
                      itemCount: appointments.length,
                      itemBuilder: (context, index) {
                        return ListTile(
                          title: Text(appointments[index].title),
                          subtitle: Text(appointments[index].customer_name),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
